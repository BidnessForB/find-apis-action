name: API Change Detection

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  detect-api-changes:
    runs-on: ubuntu-latest
    outputs:
      has-api-changes: ${{ steps.find-apis.outputs.has-changes }}
      api-changes: ${{ steps.find-apis.outputs.api-changes }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need at least 2 commits for comparison
    
    - name: Find API changes
      id: find-apis
      # Replace 'your-org/lint-modified-apis@v1' with the actual location of this action
      uses: ./  # Use this for local testing
  
  notify-api-changes:
    needs: detect-api-changes
    if: needs.detect-api-changes.outputs.has-api-changes == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Process API changes
      run: |
        echo "API changes detected!"
        echo '${{ needs.detect-api-changes.outputs.api-changes }}' | jq '.'
        
        # Example: Send notification, trigger deployment, etc.
        # You can parse the JSON and take specific actions based on:
        # - Which APIs changed
        # - Which files changed
        # - Whether root files changed
  
  validate-apis:
    needs: detect-api-changes
    if: needs.detect-api-changes.outputs.has-api-changes == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate changed API files
      run: |
        # Parse the API changes and validate each changed API
        echo '${{ needs.detect-api-changes.outputs.api-changes }}' | jq -c '.[]' | while read api; do
          apiId=$(echo "$api" | jq -r '.apiId')
          rootFile=$(echo "$api" | jq -r '.rootFile')
          integrationId=$(echo "$api" | jq -r '.integrationId')
          changedFiles=$(echo "$api" | jq -r '.changedFiles[]')
          
          echo "Validating API $apiId..."
          echo "  Root file: $rootFile"
          echo "  Integration ID: $integrationId"
          echo "  Changed files:"
          
          for file in $changedFiles; do
            echo "    - $file"
            # Add your validation logic here
            # For example: OpenAPI validation, schema checks, etc.
          done
          
          # Example: Use integration ID for deployment or notification
          if [ "$integrationId" != "null" ]; then
            echo "  → Triggering deployment for integration $integrationId"
          else
            echo "  → No integration ID found, skipping deployment"
          fi
        done
